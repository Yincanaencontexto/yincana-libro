<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yincana Virtual - Aventura del Libro</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4ecdc4 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .form-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            max-width: 680px;
            width: 100%;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            position: relative;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .form-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.1) 50%, transparent 70%);
            pointer-events: none;
        }

        .form-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 32px 24px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .form-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-10px) rotate(5deg); }
        }

        .form-title {
            font-size: 2.2rem;
            font-weight: 600;
            margin-bottom: 12px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: relative;
            z-index: 1;
        }

        .form-description {
            font-size: 1.1rem;
            opacity: 0.95;
            position: relative;
            z-index: 1;
        }

        .section {
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            padding: 40px 32px;
            position: absolute;
            width: 100%;
            top: 0;
            pointer-events: none;
        }

        .section.active {
            opacity: 1;
            transform: translateY(0);
            position: relative;
            pointer-events: all;
        }

        .section-title {
            font-size: 1.8rem;
            color: #2c3e50;
            margin-bottom: 12px;
            font-weight: 600;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .section-description {
            color: #5a6c7d;
            margin-bottom: 28px;
            line-height: 1.6;
            font-size: 1.05rem;
        }

        .question-group {
            margin-bottom: 28px;
        }

        .question-label {
            display: block;
            font-size: 1.1rem;
            color: #2c3e50;
            margin-bottom: 16px;
            font-weight: 500;
        }

        .required {
            color: #e74c3c;
            font-weight: 600;
        }

        input[type="text"], input[type="password"] {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid #e1e8ed;
            border-radius: 12px;
            font-size: 1.05rem;
            transition: all 0.3s ease;
            background: #fff;
            font-family: inherit;
        }

        input[type="text"]:focus, input[type="password"]:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .radio-group {
            margin: 16px 0;
            display: grid;
            gap: 12px;
        }

        .radio-option {
            display: flex;
            align-items: center;
            padding: 16px 20px;
            border: 2px solid #e1e8ed;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #fff;
        }

        .radio-option:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
        }

        .radio-option input[type="radio"] {
            margin-right: 16px;
            accent-color: #667eea;
            transform: scale(1.2);
        }

        .radio-option input[type="radio"]:checked + label {
            color: #667eea;
            font-weight: 600;
        }

        .radio-option:has(input:checked) {
            border-color: #667eea;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
        }

        .radio-option label {
            cursor: pointer;
            color: #2c3e50;
            font-size: 1.05rem;
        }

        .submit-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 16px 32px;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            position: relative;
            overflow: hidden;
        }

        .submit-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .submit-button:hover::before {
            left: 100%;
        }

        .submit-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);
        }

        .submit-button:active {
            transform: translateY(-1px);
        }

        .submit-button:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .download-button {
            background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
            color: white;
            border: none;
            padding: 14px 28px;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(46, 204, 113, 0.4);
            margin: 12px 8px 0 0;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .download-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(46, 204, 113, 0.6);
        }

        .error-message {
            background: linear-gradient(135deg, #ffe6e6, #ffcccc);
            border: 2px solid #ff9999;
            color: #c0392b;
            padding: 16px 20px;
            border-radius: 12px;
            margin: 20px 0;
            font-weight: 500;
            display: none;
            animation: shake 0.5s ease-in-out;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        .success-message {
            background: linear-gradient(135deg, #e8f5e8, #d4edda);
            border: 2px solid #27ae60;
            color: #155724;
            padding: 20px 24px;
            border-radius: 12px;
            margin: 20px 0;
            font-weight: 500;
            animation: bounceIn 0.6s ease;
        }

        @keyframes bounceIn {
            0% { transform: scale(0.3); opacity: 0; }
            50% { transform: scale(1.05); }
            70% { transform: scale(0.9); }
            100% { transform: scale(1); opacity: 1; }
        }

        .code-hint {
            background: linear-gradient(135deg, #fff8e1, #ffe0b2);
            border: 2px solid #ffb74d;
            color: #e65100;
            padding: 16px 20px;
            border-radius: 12px;
            margin: 20px 0;
            font-size: 0.95rem;
            font-weight: 500;
        }

        .progress-indicator {
            background: rgba(255, 255, 255, 0.3);
            height: 6px;
            width: 100%;
            position: relative;
            overflow: hidden;
        }

        .progress-bar {
            background: linear-gradient(90deg, #667eea, #764ba2);
            height: 100%;
            width: 0%;
            transition: width 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
        }

        .progress-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background-image: linear-gradient(45deg, rgba(255,255,255,.2) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.2) 50%, rgba(255,255,255,.2) 75%, transparent 75%, transparent);
            background-size: 50px 50px;
            animation: move 2s linear infinite;
        }

        @keyframes move {
            0% { background-position: 0 0; }
            100% { background-position: 50px 50px; }
        }

        .book-reference {
            background: linear-gradient(135deg, #e3f2fd, #bbdefb);
            border-left: 6px solid #2196f3;
            padding: 20px 24px;
            margin: 20px 0;
            border-radius: 0 12px 12px 0;
            box-shadow: 0 4px 12px rgba(33, 150, 243, 0.1);
        }

        .book-reference strong {
            color: #1976d2;
            font-weight: 600;
        }

        .final-section {
            text-align: center;
            padding: 50px 32px;
        }

        .final-section h2 {
            color: #27ae60;
            margin-bottom: 20px;
            font-size: 2rem;
        }

        .qr-info {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border: 2px solid #dee2e6;
            padding: 24px;
            border-radius: 16px;
            margin: 24px 0;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .qr-info h3 {
            color: #495057;
            margin-bottom: 12px;
            font-size: 1.3rem;
        }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 16px;
            margin: 24px 0;
        }

        .stat-item {
            background: linear-gradient(135deg, #fff, #f8f9fa);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            border: 2px solid #e9ecef;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            display: block;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .celebration {
            animation: celebration 2s ease-in-out;
        }

        @keyframes celebration {
            0%, 100% { transform: scale(1); }
            25% { transform: scale(1.05) rotate(1deg); }
            75% { transform: scale(1.05) rotate(-1deg); }
        }

        @media (max-width: 768px) {
            .form-container {
                margin: 10px;
                border-radius: 16px;
            }
            
            .section {
                padding: 24px 20px;
            }
            
            .form-title {
                font-size: 1.8rem;
            }
            
            .stats-container {
                grid-template-columns: 1fr 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="form-container">
        <div class="progress-indicator">
            <div class="progress-bar" id="progressBar"></div>
        </div>
        
        <div class="form-header">
            <h1 class="form-title">📚 Aventura del Libro Secreto</h1>
            <p class="form-description">Resuelve los enigmas siguiendo las pistas del libro</p>
        </div>

        <!-- Sección de Validación de Clave -->
        <div class="section active" id="validation-section">
            <h2 class="section-title">🔐 Validación de Acceso</h2>
            <p class="section-description">Introduce la clave que encontraste en esta página del libro para acceder a la pregunta.</p>
            
            <div class="book-reference">
                <strong>📖 Referencia:</strong> Busca la palabra destacada en esta página del libro.
            </div>

            <div class="question-group">
                <label class="question-label" for="accessCode">
                    Clave de acceso <span class="required">*</span>
                </label>
                <input type="password" id="accessCode" placeholder="Introduce la clave secreta">
                <div class="code-hint">
                    💡 La clave está marcada en el texto de esta página
                </div>
            </div>
            
            <div class="error-message" id="codeError">
                ❌ Clave incorrecta. Revisa cuidadosamente la página del libro.
            </div>
            
            <button class="submit-button" onclick="validateCode()">
                <span>Validar Clave</span>
            </button>
        </div>

        <!-- Sección de Pregunta -->
        <div class="section" id="question-section">
            <h2 class="section-title">🤔 Pregunta del Enigma</h2>
            <p class="section-description">¡Clave correcta! Ahora responde la pregunta basándote en lo que has leído.</p>
            
            <div class="book-reference">
                <strong>📖 Referencia:</strong> <span id="bookReference">Busca la respuesta en los capítulos anteriores</span>
            </div>

            <div class="question-group">
                <label class="question-label">
                    <span id="questionText">¿Cuál es el nombre del protagonista principal?</span> <span class="required">*</span>
                </label>
                <div class="radio-group" id="questionOptions">
                    <!-- Las opciones se generarán dinámicamente -->
                </div>
            </div>
            
            <div class="error-message" id="answerError">
                ❌ Respuesta incorrecta. Vuelve a leer la página indicada cuidadosamente.
            </div>
            
            <button class="submit-button" onclick="validateAnswer()">
                <span>Enviar Respuesta</span>
            </button>
        </div>

        <!-- Sección de Éxito -->
        <div class="section" id="success-section">
            <div class="celebration">
                <h2 class="section-title">🎉 ¡Correcto!</h2>
                <div class="success-message">
                    <strong>¡Excelente!</strong> Has resuelto el enigma correctamente.
                </div>
            </div>
            
            <div class="stats-container">
                <div class="stat-item">
                    <span class="stat-number" id="currentLevelDisplay">1</span>
                    <span class="stat-label">Nivel Actual</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="totalLevelsDisplay">6</span>
                    <span class="stat-label">Total Niveles</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="attemptsDisplay">1</span>
                    <span class="stat-label">Intentos</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="timeDisplay">--</span>
                    <span class="stat-label">Tiempo</span>
                </div>
            </div>
            
            <div class="qr-info">
                <h3>📍 Siguiente Pista</h3>
                <p id="nextHint">Dirígete al Capítulo 5, página 78. Allí encontrarás el siguiente código QR para continuar tu aventura.</p>
            </div>
            
            <div class="book-reference">
                <strong>🔍 Tu próxima misión:</strong> <span id="nextMission">Busca el símbolo del águila en la página indicada</span>
            </div>

            <div style="margin-top: 24px;">
                <button class="download-button" onclick="downloadProgressPDF()">
                    📄 Descargar Progreso
                </button>
                <button class="download-button" onclick="downloadCertificatePDF()">
                    🏆 Descargar Certificado
                </button>
            </div>
        </div>

        <!-- Sección de Error de Clave -->
        <div class="section" id="code-error-section">
            <h2 class="section-title">🚫 Clave Incorrecta</h2>
            <div class="error-message" style="display: block;">
                <strong>Acceso Denegado</strong><br>
                La clave introducida no es correcta.
            </div>
            
            <div class="book-reference">
                <strong>💡 Consejo:</strong> Revisa cuidadosamente la página actual del libro. La clave puede estar resaltada, en negrita, o ser una palabra clave importante en el texto.
            </div>
            
            <button class="submit-button" onclick="goToValidation()">Intentar de Nuevo</button>
        </div>

        <!-- Sección de Error de Respuesta -->
        <div class="section" id="answer-error-section">
            <h2 class="section-title">❌ Respuesta Incorrecta</h2>
            <div class="error-message" style="display: block;">
                <strong>Inténtalo de nuevo</strong><br>
                La respuesta no es correcta.
            </div>
            
            <div class="book-reference">
                <strong>📚 Sugerencia:</strong> <span id="readingHint">Vuelve a leer las páginas indicadas para encontrar la respuesta correcta</span>
            </div>
            
            <button class="submit-button" onclick="goToQuestion()">Volver a la Pregunta</button>
        </div>
    </div>

    <script>
        // Configuración del juego por niveles
        const gameConfig = {
            1: {
                accessCode: "misterio",
                question: "¿Cuál es el nombre del protagonista que encuentra el mapa en el capítulo 3?",
                options: [
                    { text: "Carlos", value: "carlos" },
                    { text: "Alejandro", value: "alejandro" },
                    { text: "Miguel", value: "miguel" },
                    { text: "Roberto", value: "roberto" }
                ],
                correctAnswer: "alejandro",
                bookReference: "Capítulo 3, páginas 45-47",
                readingHint: "Revisa el capítulo 3, especialmente cuando se describe el descubrimiento del mapa",
                nextHint: "Dirígete al Capítulo 5, página 78. Busca el código QR cerca de la ilustración del castillo.",
                nextMission: "Encuentra la palabra secreta en la descripción del castillo maldito"
            },
            2: {
                accessCode: "castillo",
                question: "¿Qué objeto mágico se menciona por primera vez en el capítulo 5?",
                options: [
                    { text: "Una espada encantada", value: "espada" },
                    { text: "Un amuleto dorado", value: "amuleto" },
                    { text: "Un anillo de poder", value: "anillo" },
                    { text: "Una varita mágica", value: "varita" }
                ],
                correctAnswer: "amuleto",
                bookReference: "Capítulo 5, página 87",
                readingHint: "Busca en la página 87 cuando el protagonista explora la torre del castillo",
                nextHint: "Continúa al Capítulo 8, página 134. El código QR está junto al dibujo del templo.",
                nextMission: "Descifra el código secreto tallado en las piedras del templo"
            },
            3: {
                accessCode: "piedras",
                question: "¿Cuál es la frase que abre la puerta del templo sagrado?",
                options: [
                    { text: "Luz eterna brillante", value: "luz" },
                    { text: "Sabiduría infinita ancestral", value: "sabiduria" },
                    { text: "Poder ancestral oculto", value: "poder" },
                    { text: "Verdad oculta revelada", value: "verdad" }
                ],
                correctAnswer: "luz",
                bookReference: "Capítulo 8, páginas 134-136",
                readingHint: "La frase está en las inscripciones antiguas que traduce el protagonista",
                nextHint: "Dirígete al Capítulo 11, página 178. El código QR está en el margen de la página.",
                nextMission: "Busca la llave del cofre del tesoro perdido"
            },
            4: {
                accessCode: "tesoro",
                question: "¿Quién traicionó al protagonista en el capítulo 10?",
                options: [
                    { text: "Su mejor amigo", value: "amigo" },
                    { text: "El guía del pueblo", value: "guia" },
                    { text: "La hechicera anciana", value: "hechicera" },
                    { text: "El comerciante misterioso", value: "comerciante" }
                ],
                correctAnswer: "guia",
                bookReference: "Capítulo 10, páginas 156-158",
                readingHint: "Presta atención a la conversación secreta que escucha el protagonista",
                nextHint: "Ve al Capítulo 13, página 201. El QR está al final de la página.",
                nextMission: "Encuentra el nombre del hechizo de protección final"
            },
            5: {
                accessCode: "proteccion",
                question: "¿Cuál es el ingrediente principal del elixir de la vida eterna?",
                options: [
                    { text: "Lágrimas de dragón dorado", value: "lagrimas" },
                    { text: "Polvo de estrellas caídas", value: "polvo" },
                    { text: "Agua del manantial sagrado", value: "agua" },
                    { text: "Esencia de flor lunar", value: "esencia" }
                ],
                correctAnswer: "agua",
                bookReference: "Capítulo 13, páginas 201-203",
                readingHint: "La respuesta está en la receta que encuentra en el libro antiguo",
                nextHint: "Busca el Epílogo en la página 245. El último código QR te espera.",
                nextMission: "Descubre el verdadero nombre del reino perdido"
            },
            6: {
                accessCode: "reino",
                question: "¿Cuál es el verdadero destino del protagonista al final de la historia?",
                options: [
                    { text: "Se convierte en el nuevo rey", value: "rey" },
                    { text: "Regresa a su mundo original", value: "mundo" },
                    { text: "Se queda como guardián eterno", value: "guardian" },
                    { text: "Parte hacia nuevas aventuras", value: "aventuras" }
                ],
                correctAnswer: "guardian",
                bookReference: "Epílogo, páginas 245-247",
                readingHint: "La respuesta está en las últimas líneas del epílogo",
                nextHint: "¡Felicidades! Has completado toda la aventura del libro. Has demostrado ser un verdadero explorador literario.",
                nextMission: "¡Aventura completada! Busca otros libros de la saga para más enigmas."
            }
        };

        let currentLevel = 1;
        let currentSection = 'validation-section';
        let gameStats = {
            startTime: Date.now(),
            attempts: 0,
            codeAttempts: 0,
            answerAttempts: 0,
            completedLevels: []
        };

        // Obtener nivel de la URL
        function getUrlParameter(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        // Inicializar juego
        function initGame() {
            const levelParam = getUrlParameter('level');
            if (levelParam && gameConfig[levelParam]) {
                currentLevel = parseInt(levelParam);
            }
            loadGameData();
            updateProgress();
            updateStats();
        }

        // Cargar datos del juego
        function loadGameData() {
            const config = gameConfig[currentLevel];
            if (!config) return;

            // Configurar la pregunta y opciones
            document.getElementById('questionText').textContent = config.question;
            document.getElementById('bookReference').textContent = config.bookReference;
            document.getElementById('readingHint').textContent = config.readingHint;
            document.getElementById('nextHint').textContent = config.nextHint;
            document.getElementById('nextMission').textContent = config.nextMission;

            // Generar opciones de respuesta
            const optionsContainer = document.getElementById('questionOptions');
            optionsContainer.innerHTML = '';
            
            config.options.forEach((option, index) => {
                const optionDiv = document.createElement('div');
                optionDiv.className = 'radio-option';
                optionDiv.innerHTML = `
                    <input type="radio" id="option${index}" name="answer" value="${option.value}">
                    <label for="option${index}">${option.text}</label>
                `;
                optionsContainer.appendChild(optionDiv);
            });
        }

        // Validar código de acceso
        function validateCode() {
            const inputCode = document.getElementById('accessCode').value.toLowerCase().trim();
            const correctCode = gameConfig[currentLevel].accessCode.toLowerCase();
            
            gameStats.codeAttempts++;
            gameStats.attempts++;
            
            if (inputCode === correctCode) {
                showSection('question-section');
            } else {
                showSection('code-error-section');
            }
            updateStats();
        }

        // Validar respuesta
        function validateAnswer() {
            const selectedOption = document.querySelector('input[name="answer"]:checked');
            
            if (!selectedOption) {
                showError('answerError', 'Por favor selecciona una respuesta.');
                return;
            }
            
            gameStats.answerAttempts++;
            gameStats.attempts++;
            
            const selectedAnswer = selectedOption.value;
            const correctAnswer = gameConfig[currentLevel].correctAnswer;
            
            if (selectedAnswer === correctAnswer) {
                gameStats.completedLevels.push({
                    level: currentLevel,
                    timestamp: Date.now(),
                    codeAttempts: gameStats.codeAttempts,
                    answerAttempts: gameStats.answerAttempts
                });
                showSection('success-section');
            } else {
                showSection('answer-error-section');
            }
            updateStats();
        }

        // Mostrar sección específica
        function showSection(sectionId) {
            // Ocultar todas las secciones
            document.querySelectorAll('.section').forEach(section => {
                section.classList.remove('active');
            });
            
            // Mostrar la sección solicitada con un pequeño delay para la animación
            setTimeout(() => {
                document.getElementById(sectionId).classList.add('active');
            }, 100);
            
            currentSection = sectionId;
            
            // Limpiar mensajes de error
            hideAllErrors();
            
            // Actualizar progreso
            updateProgress();
            
            // Scroll suave al top
            document.querySelector('.form-container').scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }

        // Funciones de navegación
        function goToValidation() {
            document.getElementById('accessCode').value = '';
            gameStats.codeAttempts = 0;
            gameStats.answerAttempts = 0;
            showSection('validation-section');
        }

        function goToQuestion() {
            // Limpiar selección
            document.querySelectorAll('input[name="answer"]').forEach(radio => {
                radio.checked = false;
            });
            showSection('question-section');
        }

        // Mostrar mensaje de error
        function showError(errorId, message) {
            const errorElement = document.getElementById(errorId);
            if (message) errorElement.textContent = message;
            errorElement.style.display = 'block';
            
            setTimeout(() => {
                errorElement.style.display = 'none';
            }, 4000);
        }

        // Ocultar todos los errores
        function hideAllErrors() {
            document.querySelectorAll('.error-message').forEach(error => {
                error.style.display = 'none';
            });
        }

        // Actualizar barra de progreso
        function updateProgress() {
            const totalSteps = 3; // validación, pregunta, éxito
            let currentStep = 0;
            
            switch(currentSection) {
                case 'validation-section':
                case 'code-error-section':
                    currentStep = 1;
                    break;
                case 'question-section':
                case 'answer-error-section':
                    currentStep = 2;
                    break;
                case 'success-section':
                    currentStep = 3;
                    break;
            }
            
            const progressPercent = (currentStep / totalSteps) * 100;
            document.getElementById('progressBar').style.width = progressPercent + '%';
        }

        // Actualizar estadísticas
        function updateStats() {
            document.getElementById('currentLevelDisplay').textContent = currentLevel;
            document.getElementById('totalLevelsDisplay').textContent = Object.keys(gameConfig).length;
            document.getElementById('attemptsDisplay').textContent = gameStats.attempts;
            
            const elapsedTime = Math.floor((Date.now() - gameStats.startTime) / 1000);
            const minutes = Math.floor(elapsedTime / 60);
            const seconds = elapsedTime % 60;
            document.getElementById('timeDisplay').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        // Generar PDF de progreso
        function downloadProgressPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Configuración del documento
            doc.setFontSize(20);
            doc.setTextColor(102, 126, 234);
            doc.text('📚 Yincana Virtual - Progreso', 20, 30);
            
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0);
            
            // Información del jugador
            const currentDate = new Date().toLocaleDateString('es-ES');
            const currentTime = new Date().toLocaleTimeString('es-ES');
            
            doc.text(`Fecha: ${currentDate}`, 20, 50);
            doc.text(`Hora: ${currentTime}`, 20, 60);
            
            // Estadísticas generales
            doc.setFontSize(14);
            doc.setTextColor(102, 126, 234);
            doc.text('Estadísticas Generales', 20, 80);
            
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0);
            doc.text(`Nivel actual: ${currentLevel}`, 30, 95);
            doc.text(`Total de niveles: ${Object.keys(gameConfig).length}`, 30, 105);
            doc.text(`Intentos totales: ${gameStats.attempts}`, 30, 115);
            
            const elapsedTime = Math.floor((Date.now() - gameStats.startTime) / 1000);
            const minutes = Math.floor(elapsedTime / 60);
            const seconds = elapsedTime % 60;
            doc.text(`Tiempo transcurrido: ${minutes}:${seconds.toString().padStart(2, '0')}`, 30, 125);
            
            // Detalle del nivel actual
            doc.setFontSize(14);
            doc.setTextColor(102, 126, 234);
            doc.text(`Detalles del Nivel ${currentLevel}`, 20, 145);
            
            const config = gameConfig[currentLevel];
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0);
            doc.text(`Clave de acceso: ${config.accessCode}`, 30, 160);
            
            // Pregunta (con ajuste de línea)
            const questionLines = doc.splitTextToSize(`Pregunta: ${config.question}`, 160);
            doc.text(questionLines, 30, 175);
            
            let yPosition = 175 + (questionLines.length * 10);
            doc.text(`Referencia: ${config.bookReference}`, 30, yPosition + 10);
            
            // Progreso de niveles completados
            if (gameStats.completedLevels.length > 0) {
                doc.setFontSize(14);
                doc.setTextColor(102, 126, 234);
                doc.text('Niveles Completados', 20, yPosition + 30);
                
                doc.setFontSize(12);
                doc.setTextColor(0, 0, 0);
                
                gameStats.completedLevels.forEach((level, index) => {
                    const levelDate = new Date(level.timestamp).toLocaleString('es-ES');
                    doc.text(`Nivel ${level.level} - Completado: ${levelDate}`, 30, yPosition + 50 + (index * 10));
                });
            }
            
            // Guardar el PDF
            doc.save(`yincana-progreso-nivel-${currentLevel}.pdf`);
        }

        // Generar PDF de certificado
        function downloadCertificatePDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Fondo decorativo
            doc.setFillColor(102, 126, 234);
            doc.rect(0, 0, 210, 297, 'F');
            
            doc.setFillColor(255, 255, 255);
            doc.rect(15, 15, 180, 267, 'F');
            
            doc.setFillColor(102, 126, 234);
            doc.rect(20, 20, 170, 257, 'F');
            
            doc.setFillColor(255, 255, 255);
            doc.rect(25, 25, 160, 247, 'F');
            
            // Título del certificado
            doc.setFontSize(24);
            doc.setTextColor(102, 126, 234);
            doc.text('🏆 CERTIFICADO DE LOGRO', 105, 60, { align: 'center' });
            
            doc.setFontSize(18);
            doc.setTextColor(118, 75, 162);
            doc.text('Yincana Virtual - Aventura del Libro Secreto', 105, 80, { align: 'center' });
            
            // Contenido principal
            doc.setFontSize(14);
            doc.setTextColor(0, 0, 0);
            doc.text('Por la presente se certifica que', 105, 110, { align: 'center' });
            
            doc.setFontSize(20);
            doc.setTextColor(102, 126, 234);
            doc.text('EL EXPLORADOR LITERARIO', 105, 130, { align: 'center' });
            
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0);
            
            const achievementText = currentLevel === Object.keys(gameConfig).length ? 
                'ha completado exitosamente TODOS los niveles de la Yincana Virtual' :
                `ha completado exitosamente el NIVEL ${currentLevel} de la Yincana Virtual`;
            
            doc.text(achievementText, 105, 150, { align: 'center' });
            doc.text('demostrando habilidades excepcionales de', 105, 165, { align: 'center' });
            doc.text('comprensión lectora y resolución de enigmas.', 105, 175, { align: 'center' });
            
            // Estadísticas del logro
            doc.setFontSize(11);
            doc.setTextColor(102, 126, 234);
            doc.text('ESTADÍSTICAS DEL LOGRO', 105, 200, { align: 'center' });
            
            doc.setFontSize(10);
            doc.setTextColor(0, 0, 0);
            doc.text(`Nivel alcanzado: ${currentLevel} de ${Object.keys(gameConfig).length}`, 105, 215, { align: 'center' });
            doc.text(`Intentos totales: ${gameStats.attempts}`, 105, 225, { align: 'center' });
            
            const elapsedTime = Math.floor((Date.now() - gameStats.startTime) / 1000);
            const minutes = Math.floor(elapsedTime / 60);
            const seconds = elapsedTime % 60;
            doc.text(`Tiempo empleado: ${minutes}:${seconds.toString().padStart(2, '0')}`, 105, 235, { align: 'center' });
            
            // Fecha y firma
            const currentDate = new Date().toLocaleDateString('es-ES');
            doc.text(`Otorgado el ${currentDate}`, 105, 255, { align: 'center' });
            
            doc.setFontSize(8);
            doc.setTextColor(118, 75, 162);
            doc.text('Aventura del Libro Secreto - Certificado Oficial', 105, 270, { align: 'center' });
            
            // Guardar el PDF
            const fileName = currentLevel === Object.keys(gameConfig).length ? 
                'certificado-yincana-completa.pdf' : 
                `certificado-nivel-${currentLevel}.pdf`;
            
            doc.save(fileName);
        }

        // Manejar Enter en los inputs
        document.addEventListener('DOMContentLoaded', function() {
            // Enter en el campo de código
            document.getElementById('accessCode').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    validateCode();
                }
            });
            
            // Actualizar estadísticas cada segundo
            setInterval(updateStats, 1000);
            
            // Inicializar juego
            initGame();
            
            // Efectos de sonido simulados (opcional)
            const buttons = document.querySelectorAll('.submit-button, .download-button');
            buttons.forEach(button => {
                button.addEventListener('click', function() {
                    this.style.transform = 'scale(0.95)';
                    setTimeout(() => {
                        this.style.transform = '';
                    }, 150);
                });
            });
        });

        // Función para reiniciar el juego
        function resetGame() {
            gameStats = {
                startTime: Date.now(),
                attempts: 0,
                codeAttempts: 0,
                answerAttempts: 0,
                completedLevels: []
            };
            currentLevel = 1;
            loadGameData();
            showSection('validation-section');
            updateStats();
        }

        // Función para ir al siguiente nivel (para enlaces QR)
        function goToNextLevel() {
            if (currentLevel < Object.keys(gameConfig).length) {
                currentLevel++;
                gameStats.codeAttempts = 0;
                gameStats.answerAttempts = 0;
                loadGameData();
                showSection('validation-section');
                updateStats();
            }
        }

        // Funciones adicionales para mejorar la experiencia
        
        // Detectar si el usuario ha estado inactivo
        let inactivityTimer;
        function resetInactivityTimer() {
            clearTimeout(inactivityTimer);
            inactivityTimer = setTimeout(() => {
                if (currentSection !== 'success-section') {
                    // Mostrar una pista después de 2 minutos de inactividad
                    showHint();
                }
            }, 120000); // 2 minutos
        }

        function showHint() {
            const hints = [
                "💡 Recuerda revisar cuidadosamente el texto del libro",
                "🔍 Las palabras clave suelen estar destacadas o en contextos importantes",
                "📖 Si tienes dudas, vuelve a leer la página de referencia",
                "🤔 Presta atención a los detalles mencionados en la historia"
            ];
            
            const randomHint = hints[Math.floor(Math.random() * hints.length)];
            
            // Crear un elemento de pista temporal
            const hintDiv = document.createElement('div');
            hintDiv.className = 'code-hint';
            hintDiv.innerHTML = `<strong>Pista:</strong> ${randomHint}`;
            hintDiv.style.position = 'fixed';
            hintDiv.style.top = '20px';
            hintDiv.style.right = '20px';
            hintDiv.style.zIndex = '1000';
            hintDiv.style.maxWidth = '300px';
            hintDiv.style.animation = 'slideInRight 0.5s ease';
            
            document.body.appendChild(hintDiv);
            
            setTimeout(() => {
                hintDiv.style.animation = 'slideOutRight 0.5s ease';
                setTimeout(() => {
                    document.body.removeChild(hintDiv);
                }, 500);
            }, 5000);
        }

        // Agregar estilos para las animaciones de las pistas
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);

        // Reiniciar el timer de inactividad en cualquier interacción
        document.addEventListener('click', resetInactivityTimer);
        document.addEventListener('keypress', resetInactivityTimer);
        document.addEventListener('scroll', resetInactivityTimer);

        // Inicializar el timer de inactividad
        resetInactivityTimer();
    </script>
</body>
</html>